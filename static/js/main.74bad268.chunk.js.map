{"version":3,"sources":["map/utils.tsx","map/WorldCovidMap.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getCOVIDStatistic","a","fetch","response","json","isCountriesEqueal","name","country","Country","toLowerCase","Slug","getColorFunction","DataDef","covidSummary","maxConfirmed","Countries","forEach","TotalConfirmed","Math","floor","pow","svg","countries","path","colorResolver","selectAll","data","features","enter","append","attr","style","d","properties","Globe","height","width","geoJson","projection","d3","scale","center","centroid","clipAngle","fitSize","geoGenerator","svgRef","React","createRef","useEffect","generatePath","current","ref","className","App","geojson","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"istPA6CO,SAAeA,IAAtB,+B,4CAAO,4BAAAC,EAAA,sEACkBC,MAAM,sCADxB,cACCC,EADD,gBAEQA,EAASC,OAFjB,oF,iCCzCP,SAASC,EAAkBC,EAAcC,GAEvC,MADa,QAATD,IAAgBA,EAAO,4BACpBC,EAAQC,QAAQC,gBAAkBH,EAAKG,eAAiBF,EAAQG,KAAKD,gBAAkBH,EAAKG,c,SAItFE,I,2EAAf,8BAAAV,EAAA,sEACsDW,IADtD,cACQC,EADR,OAGMC,EAAe,EACnBD,EAAaE,UAAUC,SAAQ,SAACT,GAC1BA,EAAQU,eAAiBH,IAC3BA,EAAeP,EAAQU,mBAN7B,mBAUS,SAACX,GAA0B,IAAD,gBACTO,EAAaE,WADJ,IAC/B,2BAA8C,CAAC,IAApCR,EAAmC,QAC5C,GAAIF,EAAkBC,EAAMC,GAC1B,MAAM,OAAN,OAAcW,KAAKC,MAAM,IAAMD,KAAKE,IAAIb,EAAQU,eAAiBH,EAAc,KAA/E,YAH2B,8BAM/B,MAAM,kBAhBV,4C,kEAoBA,WACEO,EACAC,EACAC,GAHF,eAAAtB,EAAA,sEAK8BU,IAL9B,OAKQa,EALR,OAOEH,EACGI,UAAU,QACVC,KAAKJ,EAAUK,UACfC,QACAC,OAAO,QACPC,KAAK,IAAKP,GACVQ,MAAM,QAAQ,SAACC,GACd,MAAM,GAAN,OAAUR,EAAcQ,EAAEC,WAAW3B,UAd3C,4C,sBAmDe4B,MAlBf,YAAwD,IAAvCC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,QAC1BC,EAAaC,MAEdC,MAAe,EAATL,GACNM,OAAOF,MAAaG,SAASL,IAC7BM,UAAU,GACVC,QAAQ,CAACR,EAAOD,GAAUE,GAEzBQ,EAAeN,MAAaD,WAAWA,GACvCQ,EAAcC,IAAMC,YAMxB,OAJAC,qBAAU,Y,wCACRC,CAAaX,IAAUO,EAAOK,SAAUd,EAASQ,MAG5C,yBAAKO,IAAKN,EAAQO,UAAW,OAAQjB,MAAOA,EAAOD,OAAQA,KC5DrDmB,G,MAbO,WACpB,IAAMC,EFoCC7B,EEjCP,OACE,yBAAK2B,UAAU,OACb,4CACA,sEACA,kBAAC,EAAD,CAAWhB,QAASkB,EAASnB,MAAO,IAAKD,OAAQ,SCDnCqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.74bad268.chunk.js","sourcesContent":["import data from './world-110.json'\n\nexport interface ICOVIDStatistic {\n  Global: {\n    NewConfirmed: number\n    TotalConfirmed: number\n    NewDeaths: number\n    TotalDeaths: number\n    NewRecovered: number\n    TotalRecovered: number\n  }\n  Countries: ICOVDCountryInfo[]\n}\n\nexport interface ICOVDCountryInfo {\n  Country: string\n  CountryCode: string\n  Slug: string\n  NewConfirmed: number\n  TotalConfirmed: number\n  NewDeaths: number\n  TotalDeaths: number\n  NewRecovered: number\n  TotalRecovered: number\n  Date: string\n}\n\nexport interface GeoJson {\n  type: string\n  features: GeoJsonCountry[]\n}\n\nexport interface GeoJsonCountry {\n  type: string\n  properties: { name: string }\n  geometry: {\n    type: string\n    coordinates: number[][][] | number[][][][]\n  }\n}\n\nexport function getGeojson(): GeoJson {\n  return data\n}\n\nexport async function getCOVIDStatistic(): Promise<ICOVIDStatistic> {\n  const response = await fetch('https://api.covid19api.com/summary')\n  return await response.json()\n}\n","import React, { useEffect } from 'react'\nimport * as DataDef from './utils'\nimport * as d3 from 'd3'\n\nfunction isCountriesEqueal(name: string, country: DataDef.ICOVDCountryInfo) {\n  if (name === 'USA') name = 'United States of America'\n  return country.Country.toLowerCase() === name.toLowerCase() || country.Slug.toLowerCase() === name.toLowerCase()\n}\n\n// Resolves color by country name\nasync function getColorFunction(): Promise<(name: string) => string> {\n  const covidSummary: DataDef.ICOVIDStatistic = await DataDef.getCOVIDStatistic()\n\n  let maxConfirmed = 0\n  covidSummary.Countries.forEach((country: DataDef.ICOVDCountryInfo) => {\n    if (country.TotalConfirmed > maxConfirmed) {\n      maxConfirmed = country.TotalConfirmed\n    }\n  })\n\n  return (name: string): string => {\n    for (const country of covidSummary.Countries) {\n      if (isCountriesEqueal(name, country)) {\n        return `rgb(${Math.floor(255 * Math.pow(country.TotalConfirmed / maxConfirmed, 1 / 5))}, 0, 0)`\n      }\n    }\n    return `rgb(0, 0, 0)`\n  }\n}\n\nasync function generatePath(\n  svg: d3.Selection<d3.BaseType, any, d3.BaseType, any>,\n  countries: DataDef.GeoJson,\n  path: d3.ValueFn<SVGPathElement, unknown, string | number | boolean | null>,\n) {\n  const colorResolver = await getColorFunction()\n\n  svg\n    .selectAll('path')\n    .data(countries.features)\n    .enter()\n    .append('path')\n    .attr('d', path)\n    .style('fill', (d: any) => {\n      return `${colorResolver(d.properties.name)}`\n    })\n  /*.on(\"mouseover\",function(d) {\n    \tconsole.log(\"just had a mouseover\", d);\n    \td3.select(this)\n      \t.classed(\"active\",true)\n  \t})\n  \t.on(\"mouseout\",function(d){\n    \td3.select(this)\n      \t.classed(\"active\",false)\n    }); */\n}\n\ntype GlobeProps = {\n  height: number\n  width: number\n  geoJson: DataDef.GeoJson\n}\n\nfunction Globe({ height, width, geoJson }: GlobeProps) {\n  let projection = d3\n    .geoEqualEarth()\n    .scale(height * 2)\n    .center(d3.geoPath().centroid(geoJson as d3.GeoPermissibleObjects))\n    .clipAngle(0)\n    .fitSize([width, height], (geoJson as unknown) as d3.ExtendedGeometryCollection<d3.GeoGeometryObjects>)\n\n  let geoGenerator = d3.geoPath().projection(projection)\n  let svgRef: any = React.createRef<SVGAElement>()\n\n  useEffect(() => {\n    generatePath(d3.select(svgRef.current), geoJson, geoGenerator as any)\n  })\n\n  return <svg ref={svgRef} className={'node'} width={width} height={height}></svg>\n}\n\nexport default Globe\n","import React from 'react'\nimport RussiaMap from './map/WorldCovidMap'\nimport * as DataDef from './map/utils'\nimport './App.css'\n\nconst App: React.FC = () => {\n  const geojson: DataDef.GeoJson = DataDef.getGeojson()\n  // console.log(geojson);\n\n  return (\n    <div className=\"App\">\n      <h1>COVID-19 MAP</h1>\n      <h2>Shows live COVID-19 data by countruies</h2>\n      <RussiaMap geoJson={geojson} width={800} height={600} />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}