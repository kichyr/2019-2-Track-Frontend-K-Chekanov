// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders drag and drop background 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <DragAndDropImg
    dragging={[Function]}
    handleDragOut={[Function]}
    handleDrop={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        style={
          Object {
            "color": "grey",
            "fontSize": 36,
            "left": 0,
            "position": "absolute",
            "right": 0,
            "textAlign": "center",
            "top": "50%",
          }
        }
      >
        <div>
          drop here :)
        </div>
      </div>,
      "onDragEnter": [Function],
      "onDragLeave": [Function],
      "onDragOver": [Function],
      "onDrop": [Function],
      "style": Object {
        "backgroundColor": "rgba(255,255,255,.8)",
        "border": "dashed grey 4px",
        "bottom": "10vh",
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": "10vh",
        "zIndex": 9999,
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div>
          drop here :)
        </div>,
        "style": Object {
          "color": "grey",
          "fontSize": 36,
          "left": 0,
          "position": "absolute",
          "right": 0,
          "textAlign": "center",
          "top": "50%",
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "drop here :)",
        },
        "ref": null,
        "rendered": "drop here :)",
        "type": "div",
      },
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          style={
            Object {
              "color": "grey",
              "fontSize": 36,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "textAlign": "center",
              "top": "50%",
            }
          }
        >
          <div>
            drop here :)
          </div>
        </div>,
        "onDragEnter": [Function],
        "onDragLeave": [Function],
        "onDragOver": [Function],
        "onDrop": [Function],
        "style": Object {
          "backgroundColor": "rgba(255,255,255,.8)",
          "border": "dashed grey 4px",
          "bottom": "10vh",
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": "10vh",
          "zIndex": 9999,
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div>
            drop here :)
          </div>,
          "style": Object {
            "color": "grey",
            "fontSize": 36,
            "left": 0,
            "position": "absolute",
            "right": 0,
            "textAlign": "center",
            "top": "50%",
          },
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "drop here :)",
          },
          "ref": null,
          "rendered": "drop here :)",
          "type": "div",
        },
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;
